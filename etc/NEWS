GNU Emacs NEWS -- history of user-visible changes.

Copyright (C) 2010 Free Software Foundation, Inc.
See the end of the file for license conditions.

Please send Emacs bug reports to bug-gnu-emacs@gnu.org.
If possible, use M-x report-emacs-bug.

This file is about changes in Emacs version 24.

See files NEWS.23, NEWS.22, NEWS.21, NEWS.20, NEWS.19, NEWS.18,
and NEWS.1-17 for changes in older Emacs versions.

You can narrow news to a specific version by calling `view-emacs-news'
with a prefix argument or by typing C-u C-h C-n.


Temporary note:
 +++ indicates that the appropriate manual has already been updated.
 --- means no change in the manuals is called for.
When you add a new item, please add it without either +++ or ---
so we will look at it and add it to the manual.


* Installation Changes in Emacs 24.1

** Configure links against libselinux if it is found.
You can disable this by using --without-selinux.

---
** By default, the installed Info and man pages are compressed.
You can disable this by configuring --without-compress-info.

---
** There are new configure options:
--with-mmdf, --with-mail-unlink, --with-mailhost.
These provide no new functionality, they just remove the need to edit
lib-src/Makefile by hand in order to use the associated features.

---
** There is a new configure option --with-crt-dir.
This is only useful if your crt*.o files are in a non-standard location.

---
** Emacs can be compiled against Gtk+ 3.0 if you pass --with-x-toolkit=gtk3
to configure.  Note that other libraries used by Emacs, RSVG and GConf,
also depend on Gtk+.  You can disable them with --without-rsvg and
--without-gconf.

** There is a new configure option --enable-use-lisp-union-type.
This is only useful for Emacs developers to debug certain types of bugs.
This is not a new feature; only the configure flag is new.

---
** New translation of the Emacs Tutorial in Hebrew is available
Type `C-u C-h t' to choose it in case your language setup doesn't
automatically select it.


* Startup Changes in Emacs 24.1

** The --unibyte, --multibyte, --no-multibyte, and --no-unibyte
command line arguments no longer have any effect.  (They were declared
obsolete in Emacs 23.)


* Changes in Emacs 24.1

** emacsclient changes

*** New emacsclient argument --parent-id ID can be used to open a
client frame in parent X window ID, via XEmbed.  This works like the
--parent-id argument to Emacs.

*** If emacsclient shuts down as a result of Emacs signalling an
error, its exit status is 1.

** Completion can cycle, depending on completion-cycle-threshold.

** auto-mode-case-fold is now enabled by default.

+++
** Emacs now supports display and editing of bidirectional text.

See the node "Bidirectional Editing" in the Emacs Manual for some
initial documentation.

To turn this on in any given buffer, set the buffer-local variable
`bidi-display-reordering' to a non-nil value.  The default is nil.

The buffer-local variable `bidi-paragraph-direction', if non-nil,
forces each paragraph in the buffer to have its base direction
according to the value of this variable.  Possible values are
`right-to-left' and `left-to-right'.  If the value is nil (the
default), Emacs determines the base direction of each paragraph from
its text, as specified by the Unicode Bidirectional Algorithm.

The function `current-bidi-paragraph-direction' returns the actual
value of paragraph base direction at point.

Reordering of bidirectional text for display in Emacs is a "Full
bidirectionality" class implementation of the Unicode Bidirectional
Algorithm.

Note that some advanced display features, such as overlay strings and
`display' text properties, do not yet work correctly when
bidirectional text is reordered for display.

** GTK scroll-bars are now placed on the right by default.
Use `set-scroll-bar-mode' to change this.

** GTK tool bars can have just text, just images or images and text.
Customize `tool-bar-style' to choose style.  On a Gnome desktop, the default
is taken from the desktop settings.

** GTK tool bars can be placed on the left/right or top/bottom of the frame.
The frame-parameter tool-bar-position controls this.  It takes the values
top, left, right or bottom.  The Options => Show/Hide menu has entries
for this.

** ImageMagick support.
It is now possible to use the ImageMagick library to load many new
image formats in Emacs.  By default, Emacs links with the ImageMagick
libraries if they are present at build time.  To disable this, use
the configure option `--without-imagemagick'.

The new function `imagemagick-types' returns a list of image file
extensions that your installation of ImageMagick supports.  The
function `imagemagick-register-types' enables ImageMagick support for
these image types, minus those listed in `imagemagick-types-inhibit'.

See the Emacs Lisp Reference Manual for more information.

** The colors for selected text (the region face) are taken from the GTK
theme when Emacs is built with GTK.

** Emacs uses GTK tooltips by default if built with GTK.  You can turn that
off by customizing x-gtk-use-system-tooltips.

** Lucid menus and dialogs can display antialiased fonts if Emacs is built
with Xft.

** Basic SELinux support has been added.
This requires Emacs to be linked with libselinux at build time.

*** Emacs preserves the SELinux file context when backing up, and
optionally when copying files. To this end, copy-file has an extra
optional argument, and backup-buffer and friends include the SELinux
context in their return values.

*** The new functions file-selinux-context and set-file-selinux-context
get and set the SELinux context of a file.

*** Tramp offers handlers for file-selinux-context and set-file-selinux-context
for remote machines which support SELinux.

** The function kill-emacs is now run upon receipt of the signals SIGTERM
and SIGHUP, and upon SIGINT in batch mode.

** kill-emacs-hook is now also run in batch mode.

** New scrolling commands `scroll-up-command' and `scroll-down-command'
(bound to C-v/[next] and M-v/[prior]) does not signal errors at top/bottom
of buffer at first key-press (instead moves to top/bottom of buffer)
when a new variable `scroll-error-top-bottom' is non-nil.

** New scrolling commands `scroll-up-line' and `scroll-down-line'
scroll a line instead of full screen.

** New property `scroll-command' should be set on a command's symbol to
define it as a scroll command affected by `scroll-preserve-screen-position'.

** Trash changes

*** `delete-by-moving-to-trash' now only affects commands that specify
trashing.  This avoids inadvertently trashing temporary files.

*** Calling `delete-file' or `delete-directory' with a prefix argument
now forces true deletion, regardless of `delete-by-moving-to-trash'.

** New option `list-colors-sort' defines the color sort order
for `list-colors-display'.

** An Emacs Lisp package manager is now included.
This is a convenient way to download and install additional packages,
from elpa.gnu.org.

*** `M-x list-packages' shows a list of packages, which can be
selected for installation.

*** New command `describe-package', bound to `C-h P'.

*** By default, all installed packages are loaded and activated
automatically when Emacs starts up.  To disable this, set
`package-enable-at-startup' to nil.  To change which packages are
loaded, customize `package-load-list'.


* Editing Changes in Emacs 24.1

** completion-at-point is now an alias for complete-symbol.

** Deletion changes

*** New option `delete-active-region'.
If non-nil, C-d, [delete], and DEL delete the region if it is active
and no prefix argument is given.  If set to `kill', these commands
kill instead.

*** New command `delete-forward-char', bound to C-d and [delete].
This is meant for interactive use, and obeys `delete-active-region';
delete-char, meant for Lisp, does not obey `delete-active-region'.

*** `delete-backward-char' is now a Lisp function.
Apart from obeying `delete-active-region', its behavior is unchanged.
However, the byte compiler now warns if it is called from Lisp; you
should use delete-char with a negative argument instead.

*** The option `mouse-region-delete-keys' has been deleted.

** Selection changes.

The default handling of clipboard and primary selections has been
changed to conform with other X applications.

*** `select-active-regions' now defaults to t, so active regions set
the primary selection.

It also accepts a new value, `lazy', which means to only set the
primary selection for temporarily active regions (usually made by
mouse-dragging or shift-selection).

*** `mouse-2' is now bound to `mouse-yank-primary'.

*** `x-select-enable-clipboard' now defaults to t.
Thus, killing and yanking now use the clipboard (in addition to the
kill ring).

*** `x-select-enable-primary' now defaults to nil.

*** `mouse-drag-copy-region' now defaults to nil.

*** Support for X cut buffers has been removed.


* Changes in Specialized Modes and Packages in Emacs 24.1

** latex-electric-env-pair-mode keeps \begin..\end matched on the fly.

** FIXME: xdg-open for browse-url and reportbug, 2010/08.  (Close bug#4546?)

** Archive Mode has basic support to browse 7z archives.

** ERC changes

*** New vars `erc-autojoin-timing' and `erc-autojoin-delay'.
If the value of `erc-autojoin-timing' is 'ident, ERC autojoins after a
successful NickServ identification, or after `erc-autojoin-delay'
seconds.  The default value, 'ident, means to autojoin immediately
after connecting.

** In ido-mode, C-v is no longer bound to ido-toggle-vc.
The reason is that this interferes with cua-mode.

** partial-completion-mode is now obsolete.
You can get a comparable behavior with:
(setq completion-styles '(partial-completion initials))
(setq completion-pcm-complete-word-inserts-delimiters t)

** mpc.el: Can use pseudo tags of the form tag1|tag2 as a union of two tags.

** Calendar, Diary, and Appt

---
*** The obsolete (since Emacs 22.1) method of enabling the appt package
by adding appt-make-list to diary-hook has been removed.  Use appt-activate.

---
*** Some appt variables (obsolete since Emacs 22.1) have been removed:
appt-issue-message (use the function appt-activate)
appt-visible/appt-msg-window (use the variable appt-display-format)

---
*** Some diary function aliases (obsolete since Emacs 22.1) have been removed:
view-diary-entries, list-diary-entries, show-all-diary-entries

** Customize

*** Customize buffers now contain a search field.
The search is performed using `customize-apropos'.
To turn off the search field, set custom-search-field to nil .

*** Custom options now start out hidden if at their default values.
Use the arrow to the left of the option name to toggle visibility.

*** custom-buffer-sort-alphabetically now defaults to t.

*** The color widget now has a "Choose" button, which allows you to
choose a color via list-colors-display.

** Dired-x

*** dired-jump and dired-jump-other-window called with a prefix argument
read a file name from the minibuffer instead of using buffer-file-name.

** VC and related modes

*** New VC commands: vc-log-incoming, vc-log-outgoing, vc-find-conflicted-file.

**** vc-log-incoming for Git runs "git fetch" so that the necessary
data is available locally.

**** vc-log-incoming and vc-log-outgoing for Git require version 1.7 (or newer).

*** New key bindings: C-x v I and C-x v O bound to vc-log-incoming and
vc-log-outgoing, respectively.

*** vc-dir for Bzr supports viewing shelve contents and shelving snapshots.

*** Special markup can be added to log-edit buffers.
The log-edit buffers are expected to have a format similar to email messages
with headers of the form:
  Author: <author of this change>
  Summary: <one line summary of this change>
  Fixes: <reference to the bug fixed by this change>
Some backends handle some of those headers specially, but any unknown header
is just left as is in the message, so it is not lost.

**** vc-git handles Author: and Date:
**** vc-hg handles  Author: and Date:
**** vc-bzr handles Author:, Date: and Fixes:
**** vc-mtn handles Author: and Date:

*** Pressing g in a *vc-diff* buffer reruns vc-diff, so it will
produce an up to date diff.

** Directory local variables can apply to file-less buffers.
For example, adding "(diff-mode . ((mode . whitespace)))" to your
.dir-locals.el file, will turn on `whitespace-mode' for *vc-diff* buffers.

** SQL Mode enhancements.

*** Several variables have been marked as safe local variables.  The
variables `sql-product', `sql-user', `sql-server', `sql-database' and
`sql-port' can now be safely used as local variables.

*** `sql-dialect' is a synonym for `sql-product'.

*** Added ability to login with a port on MySQL and Postgres.
The custom variable `sql-port' can be specified for connection to
MySQL or Postgres servers.  By default, the port is not listed in
either login parameter, but will be added to the command line if set
to a non-zero value.

*** Dynamic selection of product in an SQL interactive session.
If you use `sql-product-interactive' to start an SQL interactive
session it uses the current value of `sql-product'.  Preceding the
invocation with C-u will force it to ask for the product before
creating the session.

*** Renaming a SQL interactive buffer when it is created.
Prefixing the SQL interactive commands (`sql-sqlite', `sql-postgres',
`sql-mysql', etc.) with C-u will force a new interactive session to be
started and will prompt for the new name.  This will reduce the need
for `sql-rename-buffer' is most common use cases.

*** Command continuation prompts in SQL interactive mode are suppressed.
Multiple line commands in SQL interactive mode, generate command
continuation prompts which needlessly confuse the output.  These
prompts are now filtered out from the output.  This change impacts
multiple line SQL statements entered with C-j between each line,
statements yanked into the buffer and statements sent with
`sql-send-*' functions.

*** Custom variables control prompting for login parameters.
Each supported product has a custom variable `sql-*-login-params'
which is a list of the parameters to be prompted for before a
connection is established.

The lists consist of the following five tokens: `user', `password',
`database', `server', and `port'.  The order in which they appear is
the order in which they are prompted.  The tokens symbols can be
replaced by a sublist starting with the token and followed by a plist
which control the prompting for values.  The tokens `user',
`database', and `server' each can take a property of :default which
specifies the value to be used if no value is entered.  The
`database', `server', and `port' tokens handle the :completion
property which restricts the entry to either one of the values in the
list or to one of the values returned by the function provided as the
property value.  The `database' and `server' tokens also accept the
:file property whose value is a regexp to identify useful file names.

  (user :default DEF)
  (database :default DEF
            :file FILEPAT
            :completion COMPLETE)
  (server :default DEF
          :file FILEPAT
          :completion COMPLETE)

The FILEPAT when :file is specified is a regexp that will match valid
file names (without the directory portion).  Generally these strings
will be of the form ".+\.SUF" where SUF is the desired file suffix.

When :completion is specified, the COMPLETE corresponds to the
PREDICATE argument to the `completing-read' function (a list of
possible values or a function returning such a list).

*** Added `sql-connection-alist' to record login parameter values.
An alist for recording different username, database and server
values.  If there are multiple databases that you connect to the
parameters needed can be stored in this alist.

For example, the following might be set in the user's init.el:

  (setq sql-connection-alist
        '((dev (sql-product 'sqlite)
               (sql-database "/home/mmaug/dev.db"))
          (prd (sql-product 'oracle)
               (sql-user "mmaug")
               (sql-database "iprd2a"))))

This defines two connections named "dev" and "prd".

*** Added `sql-connect' to use predefined connections.
Sets the login parameters based on the values in the
`sql-connection-alist' and start a SQL interactive session.  Any
values specified in the connection will not be prompted for.

In the example above, if the user were to invoke M-x sql-connect, they
would be prompted for the connection.  The user can respond with
either "dev" or "prd".  The "dev" connection would connect to the
SQLite database without prompting; the "prd" connection would prompt
for the users password and then connect to the Oracle database.

**** Added SQL->Start... submenu when connections are defined.
When connections have been defined, there is a submenu available that
allows the user to select one to start a SQLi session.  The "Start
SQLi Session" item moves to the "Start..." submenu when cnnections
have been defined.

**** Added "Save Connection" menu item in SQLi buffers.
When a SQLi session is not started by a connection then
`sql-save-connection' will gather the login params specified for the
session and save them as a new connection.

*** List database objects and details.
Once a SQL interactive session has been started, you can get a list of
the objects in the database and see details of those objects.  The
objects shown and the details available are product specific.

**** List all objects.
Using `M-x sql-list-all', `C-c C-l a' or selecting "SQL->List all
objects" will list all the objects in the database.  At a minimum it
lists the tables and views in the database.  Preceeding the command by
universal argument may provide additional details or extend the
listing to include other schemas objects.  The list will appear in a
separate window in view-mode.

**** List Table details.
Using `M-x sql-list-table', `C-c C-l t' or selecting "SQL->List Table
details" will ask for the name of a database table or view and display
the list of columns in the relation.  Preceeding the comand with the
universal argument may provide additional details about each column.
The list will appear in a separate window in view-mode.

*** Added option `sql-send-terminator'.
When set makes sure that each command sent with `sql-send-*' commands
are properly terminated and submitted to the SQL processor.

*** Added option `sql-oracle-scan-on'.
When set commands sent to Oracle's SQL*Plus are scanned for strings
starting with an ampersand and the user is asked for replacement text.
In general, the SQL*Plus option SCAN should always be set OFF under
SQL interactive mode and this option used in its place.

*** SQL interactive mode will replace tabs with spaces.
This prevents the comand interpretter for MySQL and Postgres from
listing object name completions when being sent text via
`sql-send-*' functions.

*** An API for manipulating SQL product definitions has been added.

** s-region.el is now declared obsolete, superceded by shift-select-mode
enabled by default in 23.1.

** gdb-mi

*** GDB User Interface migrated to GDB Machine Interface and now
supports multithread non-stop debugging and debugging of several
threads simultaneously.

** D-Bus

*** It is possible now, to access alternative buses than the default
system or session bus.

** Tramp

*** The following access methods are discontinued: "ssh1_old",
"ssh2_old", "scp1_old", "scp2_old" and "fish".


* New Modes and Packages in Emacs 24.1

** New global minor modes electric-pair-mode and electric-indent-mode.

** pcase.el provides the ML-style pattern matching macro `pcase'.

** smie.el is a package providing a simple generic indentation engine.

** secrets.el is an implementation of the Secret Service API, an
interface to password managers like GNOME Keyring or KDE Wallet.  The
Secret Service API requires D-Bus for communication.  The command
`secrets-show-secrets' offers a buffer with a visualization of the
secrets.

** notifications.el provides an implementation of the Desktop
Notifications API.  It requires D-Bus for communication.


* Incompatible Lisp Changes in Emacs 24.1

** A backquote not followed by a space is now always treated as new-style.

** Test for special mode-class was moved from view-file to view-buffer.
FIXME: This only says what was changed, but not what are the
programmer-visible consequences.

** Passing a nil argument to a minor mode function now turns the mode
   ON unconditionally.

** During startup, Emacs no longer adds entries for `menu-bar-lines'
and `tool-bar-lines' to `default-frame-alist' and
`initial-frame-alist'.  With these alist entries omitted, `make-frame'
checks the value of the variable `menu-bar-mode'/`tool-bar-mode' to
determine whether to create a menu-bar or tool-bar, respectively.
If the alist entries are added, they override the value of
`menu-bar-mode'/`tool-bar-mode'.

** Regions created by mouse dragging are now normal active regions,
similar to the ones created by shift-selection.  In previous Emacs
versions, these regions were delineated by `mouse-drag-overlay', which
has now been removed.

** The following functions and aliases, obsolete since at least Emacs 21.1,
have been removed:
comint-kill-output, decompose-composite-char, outline-visible,
internal-find-face, internal-get-face, frame-update-faces,
frame-update-face-colors, x-frob-font-weight, x-frob-font-slant,
x-make-font-bold, x-make-font-demibold, x-make-font-unbold
x-make-font-italic, x-make-font-oblique, x-make-font-unitalic
x-make-font-bold-italic, mldrag-drag-mode-line, mldrag-drag-vertical-line,
iswitchb-default-keybindings, char-bytes, isearch-return-char

** The following variables and aliases, obsolete since at least Emacs 21.1,
have been removed:
checkdoc-minor-keymap


* Lisp changes in Emacs 24.1

** New variable syntax-propertize-function to set syntax-table properties.
Replaces font-lock-syntactic-keywords which are now obsolete.
This allows syntax-table properties to be set independently from font-lock:
just call syntax-propertize to make sure the text is propertized.
Together with this new variable come a new hook
syntax-propertize-extend-region-functions, as well as two helper functions:
syntax-propertize-via-font-lock to reuse old font-lock-syntactic-keywords
as-is; and syntax-propertize-rules which provides a new way to specify
syntactic rules.

** New hook post-self-insert-hook run at the end of self-insert-command.

+++
** Syntax tables support a new "comment style c" additionally to style b.
** frame-local variables cannot be let-bound any more.
** prog-mode is a new major-mode meant to be the parent of programming mode.
** define-minor-mode accepts a new keyword :variable.

** `delete-file' and `delete-directory' now accept optional arg TRASH.
Trashing is performed if TRASH and `delete-by-moving-to-trash' are
both non-nil.  Interactively, TRASH defaults to t, unless a prefix
argument is supplied (see Trash changes, above).

** buffer-substring-filters is obsoleted by filter-buffer-substring-functions.

** New completion style `substring'.

** Image API

*** When the image type is one of listed in `image-animated-types'
and the number of sub-images in the image is more than one, then the
new function `create-animated-image' creates an animated image where
sub-images are displayed successively with the duration defined by
`image-animate-max-time' and the delay between sub-images defined
by the Graphic Control Extension of the image.

*** `image-extension-data' is renamed to `image-metadata'.

** XML and HTML parsing

*** If Emacs is compiled with libxml2 support (which is the default),
two new Emacs Lisp-level functions are defined:
`xml-parse-html-string-internal' (which will parse "real world" HTML)
and `xml-parse-string-internal' (which parses XML).  Both return an
Emacs Lisp parse tree.

FIXME: These should be front-ended by xml.el.

** FIXME GnuTLS

** Isearch

*** New hook `isearch-update-post-hook' that runs in `isearch-update'.

** Progress reporters can now "spin".
The MIN-VALUE and MAX-VALUE arguments of `make-progress-reporter' can
now be nil, or omitted.  This makes a "non-numeric" reporter.  Each
time you call `progress-reporter-update' on that progress reporter,
with a nil or omitted VALUE argument, the reporter message is
displayed with a "spinning bar".


* Changes in Emacs 24.1 on non-free operating systems

** New configure.bat option --enable-checking builds emacs with extra
runtime checks.

** New configure.bat option --distfiles to specify files to be
   included in binary distribution

** New make target `dist' to create binary disttribution for Windows
   platform


----------------------------------------------------------------------
This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.


Local variables:
mode: outline
paragraph-separate: "[ 	]*$"
end:
