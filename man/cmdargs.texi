@c This is part of the Emacs manual.
@c Copyright (C) 1985,86,87,93,94,95,1997,2001 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Command Arguments, X Resources, Service, Top
@appendix Command Line Arguments
@cindex command line arguments
@cindex arguments (command line)
@cindex options (command line)
@cindex switches (command line)
@cindex startup (command line arguments)

  GNU Emacs supports command line arguments to request various actions
when invoking Emacs.  These are for compatibility with other editors and
for sophisticated activities.  We don't recommend using them for
ordinary editing.

  Arguments starting with @samp{-} are @dfn{options}.  Other arguments
specify files to visit.  Emacs visits the specified files while it
starts up.  The last file name on your command line becomes the
current buffer; the other files are also visited in other buffers.  If
there are two files, they are both displayed; otherwise the last file
is displayed along with a buffer list that shows what other buffers
there are.  As with most programs, the special argument @samp{--} says
that all subsequent arguments are file names, not options, even if
they start with @samp{-}.

  Emacs command options can specify many things, such as the size and
position of the X window Emacs uses, its colors, and so on.  A few
options support advanced usage, such as running Lisp functions on files
in batch mode.  The sections of this chapter describe the available
options, arranged according to their purpose.

  There are two ways of writing options: the short forms that start with
a single @samp{-}, and the long forms that start with @samp{--}.  For
example, @samp{-d} is a short form and @samp{--display} is the
corresponding long form.

  The long forms with @samp{--} are easier to remember, but longer to
type.  However, you don't have to spell out the whole option name; any
unambiguous abbreviation is enough.  When a long option takes an
argument, you can use either a space or an equal sign to separate the
option name and the argument.  Thus, you can write either
@samp{--display sugar-bombs:0.0} or @samp{--display=sugar-bombs:0.0}.
We recommend an equal sign because it makes the relationship clearer,
and the tables below always show an equal sign.

@cindex initial options (command line)
@cindex action options (command line)
  Most options specify how to initialize Emacs, or set parameters for
the Emacs session.  We call them @dfn{initial options}.  A few options
specify things to do: for example, load libraries, call functions, or
terminate Emacs.  These are called @dfn{action options}.  These and file
names together are called @dfn{action arguments}.  Emacs processes all
the action arguments in the order they are written.

@menu
* Action Arguments::	Arguments to visit files, load libraries,
			  and call functions.
* Initial Options::     Arguments that take effect while starting Emacs.
* Command Example::     Examples of using command line arguments.
* Resume Arguments::	Specifying arguments when you resume a running Emacs.
* Environment::         Environment variables that Emacs uses.

* Display X::           Changing the default display and using remote login.
* Font X::	        Choosing a font for text, under X.
* Colors X::	        Choosing colors, under X.
* Window Size X::       Start-up window size, under X.
* Borders X::	        Internal and external borders, under X.
* Title X::             Specifying the initial frame's title.
* Icons X::             Choosing what sort of icon to use, under X.
* Resources X::         Advanced use of classes and resources, under X.
* Lucid Resources::     X resources for Lucid menus.
* LessTif Resources::   X resources for LessTif and Motif menus.
@end menu

@node Action Arguments
@appendixsec Action Arguments

  Here is a table of the action arguments and options:

@table @samp
@item @var{file}
@opindex --visit
@itemx --visit=@var{file}
@opindex --file
@itemx --file=@var{file}
@cindex visiting files, command-line argument
Visit @var{file} using @code{find-file}.  @xref{Visiting}.

@item +@var{linenum} @var{file}
@opindex +@var{linenum}
Visit @var{file} using @code{find-file}, then go to line number
@var{linenum} in it.

@item +@var{linenum}:@var{columnnum} @var{file}
Visit @var{file} using @code{find-file}, then go to line number
@var{linenum} and put point at column number @var{columnnum}.

@need 3000
@item -l @var{file}
@opindex -l
@itemx --load=@var{file}
@opindex --load
@cindex loading Lisp libraries, command-line argument
Load a Lisp library named @var{file} with the function @code{load}.
@xref{Lisp Libraries}.  The library can be found either in the current
directory, or in the Emacs library search path as specified
with @env{EMACSLOADPATH} (@pxref{General Variables}).

@item -f @var{function}
@opindex -f
@itemx --funcall=@var{function}
@opindex --funcall
@cindex call Lisp functions, command-line argument
Call Lisp function @var{function} with no arguments.

@item --eval=@var{expression}
@opindex --eval
@itemx --execute=@var{expression}
@opindex --execute
@cindex evaluate expression, command-line argument
Evaluate Lisp expression @var{expression}.

@item --insert=@var{file}
@opindex --insert
@cindex insert file contents, command-line argument
Insert the contents of @var{file} into the current buffer.  This is like
what @kbd{M-x insert-file} does.  @xref{Misc File Ops}.

@item --kill
@opindex --kill
Exit from Emacs without asking for confirmation.
@end table

@vindex command-line-args
  The init file can access the values of the action arguments as the
elements of a list in the variable @code{command-line-args}.  The init
file can override the normal processing of the action arguments, or
define new ones, by reading and setting this variable.

@node Initial Options
@appendixsec Initial Options

  The initial options specify parameters for the Emacs session.  This
section describes the more general initial options; some other options
specifically related to the X Window System appear in the following
sections.

  Some initial options affect the loading of init files.  The normal
actions of Emacs are to first load @file{site-start.el} if it exists,
then your own init file @file{~/.emacs} if it exists, and finally
@file{default.el} if it exists; certain options prevent loading of some
of these files or substitute other files for them.

@table @samp
@item -t @var{device}
@opindex -t
@itemx --terminal=@var{device}
@opindex --terminal
@cindex device for Emacs terminal I/O
Use @var{device} as the device for terminal input and output.

@item -d @var{display}
@opindex -d
@itemx --display=@var{display}
@opindex --display
@cindex display for Emacs frame
Use the X Window System and use the display named @var{display} to open
the initial Emacs frame.  @xref{Display X}, for more details.

@item -nw
@opindex -nw
@itemx --no-window-system
@opindex --no-window-system
@cindex disable window system
Don't communicate directly with the window system, disregarding the
@env{DISPLAY} environment variable even if it is set.  This forces Emacs
to run as if the display were a text-only terminal.

@need 3000
@cindex batch mode
@item -batch
@opindex --batch
@itemx --batch
Run Emacs in @dfn{batch mode}, which means that the text being edited is
not displayed and the standard terminal interrupt characters such as
@kbd{C-z} and @kbd{C-c} continue to have their normal effect.  Emacs in
batch mode outputs to @code{stderr} only what would normally be displayed
in the echo area under program control, and functions which would
normally read from the minibuffer take their input from @code{stdin}.

Batch mode is used for running programs written in Emacs Lisp from
shell scripts, makefiles, and so on.  Normally the @samp{-l} option
or @samp{-f} option will be used as well, to invoke a Lisp program
to do the batch processing.

@samp{-batch} implies @samp{-q} (do not load an init file).  It also
causes Emacs to exit after processing all the command options.  In
addition, it disables auto-saving except in buffers for which it has
been explicitly requested.

@item -q
@opindex -q
@itemx --no-init-file
@opindex --no-init-file
@cindex bypassing init and site-start file
@cindex init file, not loading
@cindex @file{default.el} file, not loading
Do not load your Emacs init file @file{~/.emacs}, or @file{default.el}
either.  When invoked like this, Emacs does not allow saving options
changed with the @kbd{M-x customize} command and its variants.
@xref{Easy Customization}.

@item --no-site-file
@opindex --no-site-file
@cindex @file{site-start.el} file, not loading
Do not load @file{site-start.el}.  The options @samp{-q}, @samp{-u}
and @samp{-batch} have no effect on the loading of this file---this is
the only option that blocks it.

@item -u @var{user}
@opindex -u
@itemx --user=@var{user}
@opindex --user
@cindex load init file of another user
Load @var{user}'s Emacs init file @file{~@var{user}/.emacs} instead of
your own.

@item --debug-init
@opindex --debug-init
@cindex errors in init file
Enable the Emacs Lisp debugger for errors in the init file.

@item --unibyte
@opindex --unibyte
@cindex unibyte operation, command-line argument
Do almost everything with single-byte buffers and strings.
All buffers and strings are unibyte unless you (or a Lisp program)
explicitly ask for a multibyte buffer or string.  (Note that Emacs
always loads Lisp files in multibyte mode, even if @samp{--unibyte} is
specified; see @ref{Enabling Multibyte}.)  Setting the environment
variable @env{EMACS_UNIBYTE} has the same effect.

@item --multibyte
@opindex --multibyte
Inhibit the effect of @env{EMACS_UNIBYTE}, so that Emacs
uses multibyte characters by default, as usual.
@end table

@node Command Example
@appendixsec Command Argument Example

  Here is an example of using Emacs with arguments and options.  It
assumes you have a Lisp program file called @file{hack-c.el} which, when
loaded, performs some useful operation on the current buffer, expected
to be a C program.

@example
emacs -batch foo.c -l hack-c -f save-buffer >& log
@end example

@noindent
This says to visit @file{foo.c}, load @file{hack-c.el} (which makes
changes in the visited file), save @file{foo.c} (note that
@code{save-buffer} is the function that @kbd{C-x C-s} is bound to), and
then exit back to the shell (because of @samp{-batch}).  @samp{-batch}
also guarantees there will be no problem redirecting output to
@file{log}, because Emacs will not assume that it has a display terminal
to work with.

@node Resume Arguments
@appendixsec Resuming Emacs with Arguments

  You can specify action arguments for Emacs when you resume it after
a suspension.  To prepare for this, put the following code in your
@file{.emacs} file (@pxref{Hooks}):

@c `resume-suspend-hook' is correct.  It is the name of a function.
@example
(add-hook 'suspend-hook 'resume-suspend-hook)
(add-hook 'suspend-resume-hook 'resume-process-args)
@end example

  As further preparation, you must execute the shell script
@file{emacs.csh} (if you use csh as your shell) or @file{emacs.bash}
(if you use bash as your shell).  These scripts define an alias named
@code{edit}, which will resume Emacs giving it new command line
arguments such as files to visit.  The scripts are found in the
@file{etc} subdirectory of the Emacs distribution.

  Only action arguments work properly when you resume Emacs.  Initial
arguments are not recognized---it's too late to execute them anyway.

  Note that resuming Emacs (with or without arguments) must be done from
within the shell that is the parent of the Emacs job.  This is why
@code{edit} is an alias rather than a program or a shell script.  It is
not possible to implement a resumption command that could be run from
other subjobs of the shell; there is no way to define a command that could
be made the value of @env{EDITOR}, for example.  Therefore, this feature
does not take the place of the Emacs Server feature (@pxref{Emacs
Server}).

  The aliases use the Emacs Server feature if you appear to have a
server Emacs running.  However, they cannot determine this with complete
accuracy.  They may think that a server is still running when in
actuality you have killed that Emacs, because the file
@file{/tmp/esrv@dots{}} still exists.  If this happens, find that
file and delete it.

@node Environment
@appendixsec Environment Variables
@cindex environment variables

  The @dfn{environment} is a feature of the operating system; it
consists of a collection of variables with names and values.  Each
variable is called an @dfn{environment variable}; environment variable
names are case-sensitive, and it is conventional to use upper case
letters only.  The values are all text strings.

  What makes the environment useful is that subprocesses inherit the
environment automatically from their parent process.  This means you
can set up an environment variable in your login shell, and all the
programs you run (including Emacs) will automatically see it.
Subprocesses of Emacs (such as shells, compilers, and version-control
software) inherit the environment from Emacs, too.

@findex setenv
@findex getenv
  Inside Emacs, the command @kbd{M-x getenv} gets the value of an
environment variable.  @kbd{M-x setenv} sets a variable in the Emacs
environment.  The way to set environment variables outside of Emacs
depends on the operating system, and especially the shell that you are
using.  For example, here's how to set the environment variable
@env{ORGANIZATION} to @samp{not very much} using Bash:

@example
export ORGANIZATION="not very much"
@end example

@noindent
and here's how to do it in csh or tcsh:

@example
setenv ORGANIZATION "not very much"
@end example

  When Emacs is uses the X Window System, it inherits the use
of a large number of environment variables from the X libraries.  See
the X documentation for more information.

@menu
* General Variables::   Environment variables that all versions of Emacs use.
* Misc Variables::      Certain system-specific variables.
@end menu

@node General Variables
@appendixsubsec General Variables

  Here is an alphabetical list of specific environment variables that
have special meanings in Emacs, giving the name of each variable and
its meaning.  Most of these variables are also used by some other
programs.  Emacs does not require any of these environment variables
to be set, but it uses their values if they are set.

@table @env
@item CDPATH
Used by the @code{cd} command to search for the directory you specify,
when you specify a relative directory name.
@item EMACS_UNIBYTE
@cindex unibyte operation, environment variable
Defining this environment variable with a nonempty value directs Emacs
to do almost everything with single-byte buffers and strings.  It is
equivalent to using the @samp{--unibyte} command-line option on each
invocation.  @xref{Initial Options}.
@item EMACSDATA
Directory for the architecture-independent files that come with Emacs.
This is used to initialize the Lisp variable @code{data-directory}.
@item EMACSDOC
Directory for the documentation string file,
@file{DOC-@var{emacsversion}}.  This is used to initialize the Lisp
variable @code{doc-directory}.
@item EMACSLOADPATH
A colon-separated list of directories@footnote{
Here and below, whenever we say ``colon-separated list of directories'',
it pertains to Unix and GNU/Linux systems.  On MS-DOS and MS-Windows,
the directories are separated by semi-colons instead, since DOS/Windows
file names might include a colon after a drive letter.}
to search for Emacs Lisp files---used to initialize @code{load-path}.
@item EMACSPATH
A colon-separated list of directories to search for executable
files---used to initialize @code{exec-path}.
@item ESHELL
Used for shell-mode to override the @env{SHELL} environment variable.
@item HISTFILE
The name of the file that shell commands are saved in between logins.
This variable defaults to @file{~/.bash_history} if you use Bash, to
@file{~/.sh_history} if you use ksh, and to @file{~/.history}
otherwise.
@item HOME
The location of the user's files in the directory tree; used for
expansion of file names starting with a tilde (@file{~}).  On MS-DOS, it
defaults to the directory from which Emacs was started, with @samp{/bin}
removed from the end if it was present.  On Windows, the default value
of @code{HOME} is @file{C:/}, the root directory of drive @file{C:}.
@item HOSTNAME
The name of the machine that Emacs is running on.
@item INCPATH 
A colon-separated list of directories.  Used by the @code{complete} package
to search for files.
@item INFOPATH
A colon-separated list of directories in which to search for Info files.
@item LC_ALL
@itemx LC_COLLATE
@itemx LC_CTYPE
@itemx LC_MESSAGES
@itemx LC_MONETARY
@itemx LC_NUMERIC
@itemx LC_TIME
@itemx LANG
The user's preferred locale.  The locale has six categories, specified
by the environment variables @env{LC_COLLATE} for sorting,
@env{LC_CTYPE} for character encoding, @env{LC_MESSAGES} for system
messages, @env{LC_MONETARY} for monetary formats, @env{LC_NUMERIC} for
numbers, and @env{LC_TIME} for dates and times.  If one of these
variables is not set, the category defaults to the value of the
@env{LANG} environment variable, or to the default @samp{C} locale if
@env{LANG} is not set.  But if @env{LC_ALL} is specified, it overrides
the settings of all the other locale environment variables.

The value of the LC_CTYPE category is
matched against entries in @code{locale-language-names},
@code{locale-charset-language-names}, and
@code{locale-preferred-coding-systems}, to select a default language
environment and coding system.  @xref{Language Environments}.
@item LOGNAME
The user's login name.  See also @env{USER}.
@item MAIL
The name of the user's system mail inbox.
@item MAILRC
Name of file containing mail aliases.  (The default is
@file{~/.mailrc}.)
@item MH
Name of setup file for the mh system.  (The default is @file{~/.mh_profile}.)
@item NAME
The real-world name of the user.
@item NNTPSERVER
The name of the news server.  Used by the mh and Gnus packages.
@item ORGANIZATION
The name of the organization to which you belong.  Used for setting the
`Organization:' header in your posts from the Gnus package.
@item PATH
A colon-separated list of directories in which executables reside.  This
is used to initialize the Emacs Lisp variable @code{exec-path}.
@item PWD
If set, this should be the default directory when Emacs was started.
@item REPLYTO
If set, this specifies an initial value for the variable
@code{mail-default-reply-to}.  @xref{Mail Headers}.
@item SAVEDIR
The name of a directory in which news articles are saved by default.
Used by the Gnus package.
@item SHELL
The name of an interpreter used to parse and execute programs run from
inside Emacs.
@cindex background mode, on @code{xterm}
@item TERM
The type of the terminal that Emacs is using.  This variable must be
set unless Emacs is run in batch mode.  On MS-DOS, it defaults to
@samp{internal}, which specifies a built-in terminal emulation that
handles the machine's own display.  If the value of @env{TERM} indicates
that Emacs runs in non-windowed mode from @code{xterm} or a similar
terminal emulator, the background mode defaults to @samp{light}, and
Emacs will choose colors that are appropriate for a light background.
@item TERMCAP
The name of the termcap library file describing how to program the
terminal specified by the @env{TERM} variable.  This defaults to
@file{/etc/termcap}.
@item TMPDIR
Used by the Emerge package as a prefix for temporary files.
@item TZ
This specifies the current time zone and possibly also daylight
saving time information.  On MS-DOS, if @code{TZ} is not set in the
environment when Emacs starts, Emacs defines a default value as
appropriate for the country code returned by DOS.  On MS-Windows, Emacs
does not use @code{TZ} at all.
@item USER
The user's login name.  See also @env{LOGNAME}.  On MS-DOS, this
defaults to @samp{root}.
@item VERSION_CONTROL
Used to initialize the @code{version-control} variable (@pxref{Backup
Names}).
@end table

@node Misc Variables
@appendixsubsec Miscellaneous Variables

These variables are used only on particular configurations:

@table @env
@item COMSPEC
On MS-DOS and MS-Windows, the name of the command interpreter to use
when invoking batch files and commands internal to the shell.  On MS-DOS
this is also used to make a default value for the @env{SHELL} environment
variable.

@item NAME
On MS-DOS, this variable defaults to the value of the @env{USER}
variable.

@item TEMP
@itemx TMP
On MS-DOS and MS-Windows, these specify the name of the directory for
storing temporary files in.

@item EMACSTEST
On MS-DOS, this specifies a file to use to log the operation of the
internal terminal emulator.  This feature is useful for submitting bug
reports.

@item EMACSCOLORS
On MS-DOS, this specifies the screen colors.  It is useful to set them
this way, since otherwise Emacs would display the default colors
momentarily when it starts up.

The value of this variable should be the two-character encoding of the
foreground (the first character) and the background (the second
character) colors of the default face.  Each character should be the
hexadecimal code for the desired color on a standard PC text-mode
display.  For example, to get blue text on a light gray background,
specify @samp{EMACSCOLORS=17}, since 1 is the code of the blue color and
7 is the code of the light gray color.

The PC display usually supports only eight background colors.  However,
Emacs switches the DOS display to a mode where all 16 colors can be used
for the background, so all four bits of the background color are
actually used.

@item WINDOW_GFX
Used when initializing the Sun windows system.
@end table
